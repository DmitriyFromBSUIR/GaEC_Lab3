

#
import datetime as dt
from enum import Enum


class InitializationAlgorithm(Enum):
    GENETIC_CREATION_FUNCTION = 0
    GREEDY_ALGORITHM = 1
    BRANCHES_AND_BOUNDARIES_METHOD = 2
    LOCAL_IMPROVEMENTS_METHOD = 3
    APPROXIMATE_HEURISTIC_METHOD = 4
    PSEUDOPOLYNOMIAL_METHOD = 5
    RANDOM_SEARCH_METHOD = 6

# use it if InitializationAlgorithm == GENETIC_CREATION_FUNCTION
class InitialPopulationCreationFunction(Enum):
    CONSTRAINT_DEPENDENT_UNIFORM_METHOD = 0
    CONSTRAINT_DEPENDENT_FEASIBLE_POPULATION_METHOD = 1
    CONSTRAINT_DEPENDENT_NONLINEAR_FEASIBLE_POPULATION_METHOD = 2
    UNIFORM_METHOD = 3
    FEASIBLE_POPULATION_METHOD = 4
    NONLINEAR_FEASIBLE_POPULATION_METHOD = 5

class ReproductionOperator(Enum):
    ASYMMETRIC_WEIGHTED_ROULETTE_WHEEL_SELECTION = 0
    DETERMINISTIC_TOURNAMENT_SELECTION = 1
    STOCHASTIC_TOURNAMENT_SELECTION = 2
    RANKING_SELECTION = 3
    UNIFORM_SELECTION = 4
    REMAINDER_SELECTION = 5
    STOCHASTIC_UNIFORM_SELECTION = 6

class SpecialReproductionProcedure(Enum):
    ELITIST_STRATEGY = 0
    PARTIAL_REPLACEMENT_POPULATION_STEADY_STATE_STRATEGY = 1

class CrossoverOperator(Enum):
    ONE_POINT_CROSSOVER = 0
    TWO_POINT_CROSSOVER = 1
    MULTIPLE_POINT_CROSSOVER = 2
    MONOLITHIC_SINGLE_STAGE_UNIFORM_CROSSOVER = 3

class InversionOperator(Enum):
    ONE_GENE_LOCUS_INVERSION = 0
    GENE_LOCUSES_EXCHANGE_IN_CHROMOSOME = 1

class FitnessFunctionScalingMethod(Enum):
    LINEAR = 0
    SIGMA_TRUNCATION = 1
    POWER_LAW = 2

class StoppingCriteria(Enum):
    EPOCHS_MAX_ITERATIONS = 0
    FITNESSS_FUNCTION_TOLERANCE = 1
    CHROMOSOME_TOLERANCE = 2
    CONSTRAINT_TOLERANCE = 3
    RANK = 4
    PROPORTIONAL = 5
    

class CodingScheme(Enum):
    BINARY_CODING = 0
    DECIMAL_CODING = 1
    REAL_CODING = 2
    LOGARITHMIC_CODING = 3
